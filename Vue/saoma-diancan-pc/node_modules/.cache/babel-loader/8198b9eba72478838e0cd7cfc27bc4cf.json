{"remainingRequest":"D:\\test\\smdc\\Vue\\saoma-diancan-pc\\node_modules\\babel-loader\\lib\\index.js!D:\\test\\smdc\\Vue\\saoma-diancan-pc\\api\\header.js","dependencies":[{"path":"D:\\test\\smdc\\Vue\\saoma-diancan-pc\\api\\header.js","mtime":1701352793902},{"path":"D:\\test\\smdc\\Vue\\saoma-diancan-pc\\babel.config.js","mtime":1618227600000},{"path":"D:\\test\\smdc\\Vue\\saoma-diancan-pc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733062317302},{"path":"D:\\test\\smdc\\Vue\\saoma-diancan-pc\\node_modules\\babel-loader\\lib\\index.js","mtime":1733062318538}],"contextDependencies":[],"result":["import _MessageBox2 from \"element-ui/lib/theme-chalk/message-box.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _MessageBox from \"element-ui/lib/message-box\";\nimport Vue from 'vue';\nimport axios from 'axios';\nimport { Base64 } from 'js-base64';\nvar instance = axios.create({\n  responseType: \"json\",\n  headers: {\n    'content-type': 'application/json'\n  }\n});\n\n// http request 拦截器:是在ajax请求发出之前的操作\ninstance.interceptors.request.use(function (config) {\n  var token = localStorage.getItem(\"token\");\n  if (token) {\n    // 判断是否存在token，如果存在的话，则每个http header都加上token\n    config.headers.Authorization = token;\n  }\n  return config;\n}, function (err) {\n  return Promise.reject(err);\n});\n\n//响应拦截：请求发出之后的操作\ninstance.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (error.response) {\n    // console.log(error.response)\n    var ERRS = error.response.status;\n    var MSG = error.response.data.msg.msg;\n    var errdata = ERRS == 401 ? MSG : '服务器发生错误';\n    switch (error.response.status) {\n      case 401:\n        // console.log('没有访问权限')\n        _MessageBox.alert(errdata, '提示', {\n          confirmButtonText: '好的',\n          showCancelButton: false,\n          type: 'warning',\n          showClose: false,\n          closeOnClickModal: false\n        }).then(function () {\n          // console.log('去登陆')\n          window.location.href = '/';\n        }).catch(function () {\n          // console.log('取消')\n        });\n        break;\n    }\n  }\n  return Promise.reject(error.response.data); // 返回接口返回的错误信息error.response.data\n});\nexport default instance;",{"version":3,"names":["Vue","axios","Base64","instance","create","responseType","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","err","Promise","reject","response","error","ERRS","status","MSG","data","msg","errdata","_MessageBox","alert","confirmButtonText","showCancelButton","type","showClose","closeOnClickModal","then","window","location","href","catch"],"sources":["D:/test/smdc/Vue/saoma-diancan-pc/api/header.js"],"sourcesContent":["import Vue from 'vue';\r\nimport axios from 'axios'\r\nimport {Base64} from 'js-base64'\r\nimport { MessageBox} from 'element-ui'\r\nlet instance = axios.create({\r\n\tresponseType: \"json\",\r\n  headers: {\r\n    'content-type': 'application/json'\r\n  }\r\n})\r\n\r\n\r\n\r\n// http request 拦截器:是在ajax请求发出之前的操作\r\ninstance.interceptors.request.use(\r\n  config => {\r\n    let token = localStorage.getItem(\"token\")\r\n    if (token) {  // 判断是否存在token，如果存在的话，则每个http header都加上token\r\n      config.headers.Authorization = token;\r\n    }\r\n    return config;\r\n  },\r\n  err => {\r\n    return Promise.reject(err);\r\n  });\r\n\r\n//响应拦截：请求发出之后的操作\r\ninstance.interceptors.response.use(\r\n    response => {\r\n        return response;\r\n    },\r\n    error => {\r\n        if (error.response) {\r\n\t\t\t// console.log(error.response)\r\n\t\t\tlet ERRS = error.response.status\r\n\t\t\tlet MSG = error.response.data.msg.msg\r\n\t\t\tlet errdata = ERRS == 401 ? MSG : '服务器发生错误'\r\n            switch (error.response.status) {\r\n                case 401:\r\n                // console.log('没有访问权限')\r\n                MessageBox.alert(errdata, '提示',{\r\n\t\t\t\t      confirmButtonText: '好的',\r\n\t\t\t\t      showCancelButton:false,\r\n\t\t              type: 'warning',\r\n\t\t              showClose:false,\r\n\t\t              closeOnClickModal:false\r\n\t\t\t\t        })\r\n                .then(() => {\r\n\t\t\t\t          // console.log('去登陆')\r\n\t\t\t\t          window.location.href = '/'\r\n\t\t\t\t        }).catch(() => {\r\n\t\t\t\t         // console.log('取消')\r\n\t\t\t\t        })\r\n                break;\r\n            }\r\n        }\r\n        return Promise.reject(error.response.data)   // 返回接口返回的错误信息error.response.data\r\n    });\r\n\r\nexport default instance\r\n"],"mappings":";;;AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAAQC,MAAM,QAAO,WAAW;AAEhC,IAAIC,QAAQ,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC3BC,YAAY,EAAE,MAAM;EACnBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAIF;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/B,UAAAC,MAAM,EAAI;EACR,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACzC,IAAIF,KAAK,EAAE;IAAG;IACZD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAGH,KAAK;EACtC;EACA,OAAOD,MAAM;AACf,CAAC,EACD,UAAAK,GAAG,EAAI;EACL,OAAOC,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC;AAC5B,CAAC,CAAC;;AAEJ;AACAZ,QAAQ,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC9B,UAAAS,QAAQ,EAAI;EACR,OAAOA,QAAQ;AACnB,CAAC,EACD,UAAAC,KAAK,EAAI;EACL,IAAIA,KAAK,CAACD,QAAQ,EAAE;IACzB;IACA,IAAIE,IAAI,GAAGD,KAAK,CAACD,QAAQ,CAACG,MAAM;IAChC,IAAIC,GAAG,GAAGH,KAAK,CAACD,QAAQ,CAACK,IAAI,CAACC,GAAG,CAACA,GAAG;IACrC,IAAIC,OAAO,GAAGL,IAAI,IAAI,GAAG,GAAGE,GAAG,GAAG,SAAS;IAClC,QAAQH,KAAK,CAACD,QAAQ,CAACG,MAAM;MACzB,KAAK,GAAG;QACR;QACAK,WAAA,CAAWC,KAAK,CAACF,OAAO,EAAE,IAAI,EAAC;UACrCG,iBAAiB,EAAE,IAAI;UACvBC,gBAAgB,EAAC,KAAK;UAChBC,IAAI,EAAE,SAAS;UACfC,SAAS,EAAC,KAAK;UACfC,iBAAiB,EAAC;QACtB,CAAC,CAAC,CACGC,IAAI,CAAC,YAAM;UACd;UACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;QAC5B,CAAC,CAAC,CAACC,KAAK,CAAC,YAAM;UACd;QAAA,CACA,CAAC;QACE;IACJ;EACJ;EACA,OAAOrB,OAAO,CAACC,MAAM,CAACE,KAAK,CAACD,QAAQ,CAACK,IAAI,CAAC,EAAG;AACjD,CAAC,CAAC;AAEN,eAAepB,QAAQ","ignoreList":[]}]}